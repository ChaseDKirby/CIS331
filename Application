package Group_Project;

import java.util.*;
public class Application {


    public static void main(String[] args) {
        
        //Global Variables
        int customerQuantity = 4;
        int contractorQuantity = 0;
        int vendorQuantity = 3;
        int itemQuantity = 10;
        int saleQuantity = 5;
        int ID = 1;
        
        // Global Arrays
        Customer[] customerArray = new Customer[1000];
        Contractor[] contractorArray = new Contractor[1000];
        Vendor[] vendorArray = new Vendor[1000];
        Item[] itemArray = new Item[1000];
        Sale[] saleArray = new Sale[1000];
        
        // Pre-Populate System
        //Customers
        customerArray[0] = new Customer(ID++, "Adam", "Sandler", "3204 Sandy Rd", "3203458909", "ASandler@yahoo.com");
        customerArray[1] = new Customer(ID++, "Seth", "Rogan", "89920 Hills St", "1239905273", "SRogan@gmail.com");
        customerArray[2] = new Customer(ID++, "Ryan", "Renolds", "2933 Showtime Rd", "847333009", "RRynolds@yahoo.com");
        customerArray[3] = new Customer(ID++, "Denzel", "Washington", "2312 Equalizer BLVD", "5567893344", "DWashington@yahoo.com");
        
        // Items
        itemArray[0] = new Item(ID++,"TV", 25.3, "LED Flat Screen TV", 330.0, 290.0);
        itemArray[1] = new Item(ID++, "Candle", 5.0, "Scented Candle", 10.0, 9.0);
        itemArray[2] = new Item(ID++, "Xbox", 10.0, "Video Game", 220.0, 199.99);
        itemArray[3] = new Item(ID++, "Computer", 15.7, "Desktop Computer", 556.35, 510.00);
        itemArray[4] = new Item(ID++, "Speakers", 17.2, "Boze Speaker", 65.8, 59.99);
        itemArray[5] = new Item(ID++, "Backpack", 6.8, "Backpack to hold books", 42.56, 35.99);
        itemArray[6] = new Item(ID++, "Bottle Water", 1.4, "Purified Drinking Water", 3.24, 2.99);
        itemArray[7] = new Item(ID++, "Phone", 3.5, "iPhone 7.0", 456.34, 399.99);
        itemArray[8] = new Item(ID++, "Couch", 120.3, "Tan L-Shaped Couch", 995.43, 875.99);
        itemArray[9] = new Item(ID++, "Phone Charger", 1.0, "6 Foot iPhone Charger", 11.45, 9.99);
        
        // Vendors
        vendorArray[0] = new Vendor(ID++, "Apple Inc", "1000 Apple Rd", "4563329000");
        vendorArray[1] = new Vendor(ID++, "Samsung", "9087 Runaway Drive", "6783322141");
        vendorArray[2] = new Vendor(ID++, "Microsoft", "2342 South St", "3234518768");
        
        // Sales
        saleArray[0] = new Sale(ID++, itemArray[0], 5, "04/29/2010", customerArray[2]);
        saleArray[1] = new Sale(ID++, itemArray[6], 24, "11/13/2018", customerArray[1]);
        saleArray[2] = new Sale(ID++,itemArray[9], 1, "09/05/2009", customerArray[0]);
        saleArray[3] = new Sale(ID++,itemArray[3], 1, "04/12/2000", customerArray[3]);
        saleArray[4] = new Sale(ID++, itemArray[2], 5, "11/01/2015", customerArray[2]);
        
        
                
                
        
        //Calls Menu
        Menu(customerArray, customerQuantity, contractorArray, contractorQuantity, vendorArray, vendorQuantity, itemArray, itemQuantity, saleArray, saleQuantity, ID);
    }
// Menu System to be called everytime until exited
public static void Menu(Customer[] customerArray, int customerQuantity, Contractor[] contractorArray, int contractorQuantity, Vendor[] vendorArray, int vendorQuantity, Item[] itemArray, int itemQuantity, Sale[] saleArray, int saleQuantity, int ID)
{
    System.out.println("\nPlease select a menu Option (1-14)\n");
    Scanner in = new Scanner(System.in);
    System.out.println("1. Create Customer \n2. Edit Customer \n3. Create Contractor \n4. Edit Contractor \n5. Create Inventory Item \n6. Edit Inventory Item \n7. Create a Vendor \n"
            + "8. Edit a Vendor \n9. Enter a Sale \n10. Print a Receipt for a sale \n11. Print Purchase History of Customer "
            + "\n12. Print Purchase History for an Item \n13. Print Current Inventory Levels \n14. Exit Application");

    int selection = in.nextInt();
    
    switch (selection){
        case 1:
        CreateCustomer(customerArray, customerQuantity, ID);
        customerQuantity++;
        ID++;
        Menu(customerArray, customerQuantity, contractorArray, contractorQuantity, vendorArray, vendorQuantity, itemArray, itemQuantity, saleArray, saleQuantity, ID);
        break;
        case 2:
        EditCustomer(customerArray, customerQuantity, ID);
        Menu(customerArray, customerQuantity, contractorArray, contractorQuantity, vendorArray, vendorQuantity, itemArray, itemQuantity, saleArray, saleQuantity, ID);
        break;
        case 3:
        CreateContractor(contractorArray, contractorQuantity, ID);
        contractorQuantity++;
        ID++;
        Menu(customerArray, customerQuantity, contractorArray, contractorQuantity, vendorArray, vendorQuantity, itemArray, itemQuantity, saleArray, saleQuantity, ID);
        break;
        case 4:
        EditContractor(contractorArray, contractorQuantity, ID);
        Menu(customerArray, customerQuantity, contractorArray, contractorQuantity, vendorArray, vendorQuantity, itemArray, itemQuantity, saleArray, saleQuantity, ID);
        break;
        case 5:
        CreateInventoryItem(itemArray, itemQuantity, ID);
        itemQuantity++;
        ID++;
        Menu(customerArray, customerQuantity, contractorArray, contractorQuantity, vendorArray, vendorQuantity, itemArray, itemQuantity, saleArray, saleQuantity, ID);
        break;    
        case 6:
        EditInventoryItem(itemArray, itemQuantity, ID);
        Menu(customerArray, customerQuantity, contractorArray, contractorQuantity, vendorArray, vendorQuantity, itemArray, itemQuantity, saleArray, saleQuantity, ID);
        break;
        case 7:
        CreateVendor(vendorArray, vendorQuantity, ID);
        vendorQuantity++;
        ID++;
        Menu(customerArray, customerQuantity, contractorArray, contractorQuantity, vendorArray, vendorQuantity, itemArray, itemQuantity, saleArray, saleQuantity, ID);
        break;
        case 8:
        EditVendor(vendorArray, vendorQuantity, ID);
        Menu(customerArray, customerQuantity, contractorArray, contractorQuantity, vendorArray, vendorQuantity, itemArray, itemQuantity, saleArray, saleQuantity, ID);
        break;
        case 9:
        CreateSale(customerArray, itemArray, itemQuantity, customerQuantity, saleArray, saleQuantity, ID);
        saleQuantity++;
        ID++;
        Menu(customerArray, customerQuantity, contractorArray, contractorQuantity, vendorArray, vendorQuantity, itemArray, itemQuantity, saleArray, saleQuantity, ID);
        break;
        case 10:
        PrintReceiptForSale(saleArray, saleQuantity);
        Menu(customerArray, customerQuantity, contractorArray, contractorQuantity, vendorArray, vendorQuantity, itemArray, itemQuantity, saleArray, saleQuantity, ID);
        break;
        case 11:
        PrintPurchaseHistoryCustomer(customerArray, customerQuantity, saleArray, saleQuantity, itemArray, itemQuantity);
        Menu(customerArray, customerQuantity, contractorArray, contractorQuantity, vendorArray, vendorQuantity, itemArray, itemQuantity, saleArray, saleQuantity, ID);
        break;
        case 12:
        PrintPurchaseHistoryItem(itemArray, itemQuantity, saleArray, saleQuantity);
        Menu(customerArray, customerQuantity, contractorArray, contractorQuantity, vendorArray, vendorQuantity, itemArray, itemQuantity, saleArray, saleQuantity, ID);
        break;
        case 13:
        PrintInventoryLevels(itemQuantity, itemArray, saleQuantity, saleArray);
        Menu(customerArray, customerQuantity, contractorArray, contractorQuantity, vendorArray, vendorQuantity, itemArray, itemQuantity, saleArray, saleQuantity, ID);
        break;
        case 14:
        System.exit(0);    
        default: System.out.println("Please enter a valid option\n");
        Menu(customerArray, customerQuantity, contractorArray, contractorQuantity, vendorArray, vendorQuantity, itemArray, itemQuantity, saleArray, saleQuantity, ID);
        break;
    }

}
// Creates a customer when selected
public static Customer[] CreateCustomer(Customer[] customerArray, int customerQuantity, int ID)
{customerArray[customerQuantity] = new Customer();
    Scanner in = new Scanner(System.in);
    System.out.print("Enter Customer Address: ");
    
    customerArray[customerQuantity].address = in.nextLine();
    System.out.print("Enter Customer First Name: ");

  
    customerArray[customerQuantity].setFirstName(in.next());
    System.out.print("Enter Customer Last Name: ");
    
    
    customerArray[customerQuantity].setLastName(in.next());
   
    System.out.print("Enter Customer Phone Number: ");
    String phoneNumber = in.next();
     while (phoneNumber.length() < 10 || phoneNumber.length() > 10)
               {
                    System.out.println("Please enter 10 digits");
                    phoneNumber = in.next();
               }
            
    customerArray[customerQuantity].setPhoneNumber(phoneNumber);
    
    System.out.print("Enter Customer Email: ");
    customerArray[customerQuantity].setEmail(in.next());                 
    customerArray[customerQuantity].ID = ID;
    ID++;
    
    
    
    return customerArray;
}
// Edits a Specific Customer
public static void EditCustomer(Customer[] customerArray, int customerQuantity, int ID)
{
   
   System.out.println("Select Customer to Edit.");
   System.out.println("Ref\tID\t   Full Name");
   for (int i = 0; i < customerQuantity; i++)
   {
       System.out.println(i+1 + customerArray[i].toString());
   }
   
   Scanner in = new Scanner(System.in);
   int chosenID = in.nextInt()- 1;
   if (chosenID >= customerQuantity)
   {
       System.out.println("Please Enter a Valid Customer");
   }
   else
   {
       int editing = 1;
       System.out.println("Choose Data Field to Edit.");
       do{
        System.out.println("\n1. First Name \n2. Last Name \n3. Address \n4. Phone Number \n5. Email");
        int selection = in.nextInt();
        switch(selection){
            case 1:
                System.out.println("Please enter a First Name.");
            
                customerArray[chosenID].setFirstName(in.next());
                break;
            case 2:
                System.out.println("Please enter a Last Name.");
                customerArray[chosenID].setLastName(in.next());
                break;
            case 3:
                Scanner input = new Scanner(System.in);
                System.out.println("Please enter a Address.");
                customerArray[chosenID].address = input.nextLine();
                break;
            case 4:
                boolean isValid = false;
                String phoneNumber = "";
                while (isValid == false) {
    if (in.hasNextLine()) {
        phoneNumber = in.nextLine();
        if (phoneNumber.length() !=  10) {
            System.out.print("Please enter in 10 didgits ");
        }
        else {
            isValid = true;
                }
        }
    else {
        System.out.print("Error: You must enter a number! Try again: ");
        in.next();
    }
}
                
                customerArray[chosenID].setPhoneNumber(phoneNumber);
                
                break;
            case 5:
                System.out.println("Please enter a Email.");
                customerArray[chosenID].setEmail(in.next());
                break;
            default:
                System.out.println("Please enter a valid option\n");
                break;
   }
        System.out.println("Continue Editing? \n1. Yes \n2. No");
        editing = in.nextInt();
       } while (editing == 1);
   }
  
}
// Create a Contractor
public static Contractor[] CreateContractor(Contractor[] contractorArray, int contractorQuantity, int ID)
{
    Scanner in = new Scanner(System.in);
    Scanner input = new Scanner(System.in);
    System.out.print("Enter Contractor Address: ");
    String address = in.nextLine();
    System.out.print("Enter Contractor First Name: ");
    String firstName = in.next();
    System.out.print("Enter Contractor Last Name: ");
    String lastName = in.next();
    System.out.print("Enter Contractor Phone Number: ");
    String phoneNumber = in.next();
    while (phoneNumber.length() < 10 || phoneNumber.length() > 10)
    {
        System.out.println("Please enter 10 digits");
        phoneNumber = in.next();
    }
    
    System.out.print("Enter Contractor Email: ");
    String email = in.next();
    System.out.print("Enter Contractor Number: ");                
    int contractorNumber = 0;
     boolean isValid = false;

   boolean isTrue = false;

while (isValid == false) {
    if (in.hasNextDouble()) {
        contractorNumber = in.nextInt();
        if (contractorNumber < 0) {
            System.out.print("Please enter a positive number");
        }
        else {
            isValid = true;
                }
        }
    else {
        System.out.print("Error: You must enter a number! Try again: ");
        in.next();
    }
}
    
    System.out.print("Enter name of Business: ");                                     
    String businessName = input.nextLine();
            
    contractorArray[contractorQuantity] = new Contractor(ID++, firstName, lastName, address, phoneNumber, email, contractorNumber, businessName);
    return contractorArray;
}
// Edit a Contractor that has been created already
public static void EditContractor(Contractor[] contractorArray, int contractorQuantity, int ID)
{
   if (contractorQuantity == 0)
   {
       System.out.println("No Contractor Created.");
   }
   else
   {
   System.out.println("Select Contractor to Edit.");
   System.out.println("Ref\tID\t  Full Name");
   for (int i = 0; i < contractorQuantity; i++)
   {
       System.out.println(i+1 + contractorArray[i].toString());
   }
   
   Scanner in = new Scanner(System.in);
   int chosenID = in.nextInt()- 1;
   if (chosenID >= contractorQuantity)
   {
       System.out.println("Please Enter a Valid Contractor");
   }
   else
   {
       int editing = 1;
       System.out.println("Choose Data Field to Edit.");
       do{
        System.out.println("\n1. First Name \n2. Last Name \n3. Address \n4. Phone Number \n5. Email \n6. Contract Number \n7. Business Name ");
        int selection = in.nextInt();
        String phoneNumber = String.valueOf(selection);
        switch(selection){
            case 1:
                System.out.println("Please enter a First Name.");
                contractorArray[chosenID].setFName(in.next());
                break;
            case 2:
                System.out.println("Please enter a Last Name.");
                contractorArray[chosenID].setLName(in.next());
                break;
            case 3:
                Scanner input = new Scanner(System.in);
                System.out.println("Please enter a Address.");
                contractorArray[chosenID].setAddress(input.nextLine());
                break;
            case 4:
                System.out.println("Please enter a Phone Number.");
                    boolean isValid = false;
                String phoneNumberr = "";
                while (isValid == false) {
    if (in.hasNextLine()) {
        phoneNumberr = in.nextLine();
        if (phoneNumberr.length() !=  10) {
            System.out.print("Please enter in 10 didgits ");
        }
        else {
            isValid = true;
                }
        }
    else {
        System.out.print("Error: You must enter a number! Try again: ");
        in.next();
    }
}
                contractorArray[chosenID].setPNumber(phoneNumberr);
                break;
            case 5:
                System.out.println("Please enter a Email.");
                contractorArray[chosenID].setEmail(in.next());
                break;
            case 6:
                System.out.println("Please enter a Contractor Number");
                int contractorNumber = 0;
                boolean isWorks = false;

   

while (isWorks == false) {
    if (in.hasNextDouble()) {
        contractorNumber = in.nextInt();
        if (contractorNumber < 0) {
            System.out.print("Please enter a positive number");
        }
        else {
            isValid = true;
                }
        }
    else {
        System.out.print("Error: You must enter a number! Try again: ");
        in.next();
    }
}                                                             
                contractorArray[chosenID].contractorNumber = in.nextInt();
            case 7:
                Scanner space = new Scanner(System.in);
                System.out.println("Enter Contractor's Business Name");
                contractorArray[chosenID].businessName = space.nextLine();
            default:
                System.out.println("Please enter a valid option\n");
                break;    
   }
        System.out.println("Continue Editing? \n1. Yes \n2. No");
        editing = in.nextInt();
       } while (editing == 1);
   }
   }
}
public static Item[] CreateInventoryItem(Item[] itemArray, int itemQuantity, int ID)
{
    Scanner in = new Scanner(System.in);
    System.out.print("Enter Item Name: ");
    String itemName = in.nextLine();
    System.out.print("Enter Item's Description: ");
    String description = in.nextLine();
    System.out.print("Enter Item's Weight: ");
    Double weight = 0.0;
    System.out.print("Enter Price Paid for Item: ");
    Double pricePaid = in.nextDouble();
    System.out.print("Enter Item's for Sale Price: ");
    Double forSalePrice = in.nextDouble();
    
    
    boolean isValid = false;

while (isValid == false) {
    if (in.hasNextDouble()) {
        weight = in.nextDouble();
        if (weight < 0) {
            System.out.print("Please enter a positive weight");
        }
        else {
            isValid = true;
                }
        }
    else {
        System.out.print("Error: You must enter a number! Try again: ");
        in.next();
    }
}   
    
    boolean isValidd = false;

while (isValidd == false) {
    if (in.hasNextDouble()) {
        pricePaid = in.nextDouble();
        if (pricePaid < 0) {
            System.out.print("Please enter a positive price");
        }
        else {
            isValidd = true;
                }
        }
    else {
        System.out.print("Error: You must enter a number! Try again: ");
        in.next();
    }
}  
    boolean isValiddd = false;

while (isValiddd == false) {
    if (in.hasNextDouble()) {
        forSalePrice = in.nextDouble();
        if (forSalePrice < 0) {
            System.out.print("Please enter a positive price");
        }
        else {
            isValiddd = true;
                }
        }
    else {
        System.out.print("Error: You must enter a number! Try again: ");
        in.next();
    }
}
     
   
    
    itemArray[itemQuantity] = new Item(ID++, itemName, weight, description, pricePaid, forSalePrice);
    return itemArray;
    
}
public static void EditInventoryItem(Item[] itemArray, int itemQuantity, int ID)
{
   System.out.println("Select Item to Edit.");
   System.out.println("Ref\tID\tItem Name");
   for (int i = 0; i < itemQuantity; i++)
   {
       System.out.println(i+1 + itemArray[i].toString());
   }
   
   Scanner in = new Scanner(System.in);
   int chosenID = in.nextInt()- 1;
   if (chosenID >= itemQuantity)
   {
       System.out.println("Please Enter a Valid Item");
   }
   else
   {
       int editing = 1;
       System.out.println("Choose Data Field to Edit.");
       do{
        System.out.println("\n1. Item Name \n2. Item Weight \n3. Description \n4. Price Paid \n5. For Sale Price");
        int selection = in.nextInt();
        switch(selection){
            case 1:
                System.out.println("Please enter a Item Name.");
                itemArray[chosenID].itemName = in.next();
                break;
            case 2:
                System.out.println("Please enter Weight for Item.");
                  Double weight = 0.0;
    
    
    boolean isValid = false;

while (isValid == false) {
    if (in.hasNextDouble()) {
        weight = in.nextDouble();
        if (weight < 0) {
            System.out.print("Please enter a positive weight");
        }
        else {
            isValid = true;
                }
        }
    else {
        System.out.print("Error: You must enter a number! Try again: ");
        in.next();
    }
}

                itemArray[chosenID].weight = weight;
                break;
            case 3:
                Scanner input = new Scanner(System.in);
                System.out.println("Please enter Description for Item.");
                itemArray[chosenID].description = input.nextLine();
                break;
            case 4:
                System.out.println("Please enter Price Paid for Item.");
                Double pricePaid = 0.0;
    
    
    boolean isValidd = false;

while (isValidd == false) {
    if (in.hasNextDouble()) {
        pricePaid = in.nextDouble();
        if (pricePaid < 0) {
            System.out.print("Please enter a positive price");
        }
        else {
            isValidd = true;
                }
        }
    else {
        System.out.print("Error: You must enter a number! Try again: ");
        in.next();
    }
}


                itemArray[chosenID].setPrice(pricePaid);
                break;
            case 5:
                System.out.println("Please enter Item's for Sale Price.");
                Double forSalePrice = 0.0;
    
    
    boolean isValiddd = false;

while (isValiddd == false) {
    if (in.hasNextDouble()) {
        forSalePrice = in.nextDouble();
        if (forSalePrice < 0) {
            System.out.print("Please enter a positive price");
        }
        else {
            isValiddd = true;
                }
        }
    else {
        System.out.print("Error: You must enter a number! Try again: ");
        in.next();
    }
}
                
                itemArray[chosenID].forSalePrice = forSalePrice;
                break;
            default:
                System.out.println("Please enter a valid option\n");
                break;    
   }
        System.out.println("Continue Editing? \n1. Yes \n2. No");
        editing = in.nextInt();
       } while (editing == 1);
   }
}
// Creates a new Vendor
public static Vendor[] CreateVendor(Vendor[] vendorArray, int vendorQuantity, int ID)
{
    Scanner in = new Scanner(System.in);
    System.out.print("Enter Business Address: ");
    String businessAddress = in.nextLine();
    System.out.print("Enter Business Name: ");
    String businessName = in.next();
    
    System.out.print("Enter Customer Phone Number: ");
    String businessPhoneNumber = in.next();
  while (businessPhoneNumber.length() < 10 || businessPhoneNumber.length() > 10)
    {
        System.out.println("Please enter 10 digits");
        businessPhoneNumber = in.next();
    }
    
    
    vendorArray[vendorQuantity] = new Vendor(ID++, businessName, businessAddress, businessPhoneNumber);
    return vendorArray;
}
// Edits an exisiting Vendor
public static void EditVendor(Vendor[] vendorArray, int vendorQuantity, int ID)
{
    System.out.println("Select Vendor to Edit.");
    System.out.println("Ref\tID\tItem Name");
   for (int i = 0; i < vendorQuantity; i++)
   {
       System.out.println(i+1 + vendorArray[i].toString());
   }
   
   Scanner in = new Scanner(System.in);
   int chosenID = in.nextInt()- 1;
   if (chosenID >= vendorQuantity)
   {
       System.out.println("Please Enter a Valid Vendor");
   }
   else
   {
       int editing = 1;
       System.out.println("Choose Data Field to Edit.");
       do{
        System.out.println("\n1. Business Name \n2. Business Phone Number\n3. Business Address");
        int selection = in.nextInt();
        switch(selection){
            case 1:
                System.out.println("Please enter a Business Name.");
                Scanner input1 = new Scanner(System.in);
                String vendorBusinessName = input1.nextLine();
                vendorArray[chosenID].vendorBusinessName = vendorBusinessName;
                break;
            case 2:
                System.out.println("Please enter a Business Phone Number");
                boolean isValid = false;
                String vendorPhoneNumber = "";
                while (isValid == false) {
    if (in.hasNextLine()) {
        vendorPhoneNumber = in.next();
        if (vendorPhoneNumber.length() !=  10) {
            System.out.print("Please enter in 10 didgits ");
        }
        else {
            isValid = true;
                }
        }
    else {
        System.out.print("Error: You must enter a number! Try again: ");
        in.next();
    }
}
                             
                vendorArray[chosenID].vendorPhoneNumber = vendorPhoneNumber;
                break;
            case 3:
                Scanner input = new Scanner(System.in);
                System.out.println("Please enter a Business Address.");
                String vendorBusinessAddress = input.nextLine();
                vendorArray[chosenID].vendorBusinessAddress = vendorBusinessAddress;
                break;
            default:
                System.out.println("Please enter a valid option\n");
                break;    
            
   }
        System.out.println("Continue Editing? \n1. Yes \n2. No");
        editing = in.nextInt();
       } while (editing == 1);
   }
}
public static void CreateSale(Customer[] customerArray, Item[] itemArray, int itemQuantity, int customerQuantity, Sale[] saleArray, int saleQuantity, int ID)
{
   System.out.println("Select an Item for a Sale.");
   System.out.println("Ref\tID\tItem Name");
   for (int i = 0; i < itemQuantity; i++)
   {
       System.out.println(i+1 + itemArray[i].toString());
   }
   Scanner in = new Scanner(System.in);
   int chosenID = in.nextInt()- 1;
   if (chosenID >= itemQuantity)
   {
       System.out.println("Please Enter a Valid Item");
   }
   else
   {
       System.out.print("Enter Quantity of Item Bought: ");                    
       int quantity = 0;
                
         boolean isValid = false;

while (isValid == false) {
    if (in.hasNextInt()) {
        quantity = in.nextInt();
        if (quantity < 0) {
            System.out.print("Please enter a positive weight");
        }
        else {
            isValid = true;
                }
        }
    else {
        System.out.print("Error: You must enter a number! Try again: ");
        in.next();
    }
}
       System.out.print("Enter Date Purchase (XX/XX/XXX): ");
       String date = in.next();
       
       System.out.println("Select a Customer who purchased Item.");
       System.out.println("Ref\tID\t   Full Name");
       for (int i = 0; i < customerQuantity; i++)
        {
            System.out.println(i+1 + customerArray[i].toString());
        }
        int customerChosenID = in.nextInt()- 1;
        if (customerChosenID >= customerQuantity)
        {
            System.out.println("Please Enter a Valid Customer");
        }
        else
        {
            saleArray[saleQuantity] = new Sale(ID++, itemArray[chosenID], quantity, date, customerArray[customerChosenID]);
        }
   }
}
public static void PrintReceiptForSale(Sale[] saleArray, int saleQuantity)
{
   System.out.println("Select a Sale to Print a Receipt.");
   System.out.println("Ref\tID\tItem Name\tName");
   for (int i = 0; i < saleQuantity; i++)
   {
       System.out.println(i+1 + saleArray[i].toString());
   }
   Scanner in = new Scanner(System.in);
   int chosenID = in.nextInt()- 1;
   System.out.print(saleArray[chosenID].describeSale());
}
public static void PrintPurchaseHistoryCustomer(Customer[] customerArray, int customerQuantity, Sale[] saleArray, int saleQuantity, Item[] itemArray, int itemQuantity)  
{ 
    System.out.println("Select Customer to Edit.");
   System.out.println("Ref\tID\t   Full Name");
   for (int i = 0; i < customerQuantity; i++)
   {
       System.out.println(i+1 + customerArray[i].toString());
   }
   
   Scanner in = new Scanner(System.in);
   int chosenID = in.nextInt()- 1;
   if (chosenID >= customerQuantity)
   {
       System.out.println("Please Enter a Valid Customer");
   }
   else
   {
       System.out.println(customerArray[chosenID].firstName + " " + customerArray[chosenID].lastName);
       System.out.println("-----------------------------------------------------------------------");
       for (int i = 0; i < saleQuantity; i++)
        {
            if (saleArray[i].customer == customerArray[chosenID])
                    System.out.println(saleArray[i].CustomerPurchaseHistory(customerArray[chosenID]));
        }            
   }
}
public static void PrintPurchaseHistoryItem(Item[] itemArray, int itemQuantity, Sale[] saleArray, int saleQuantity)
{
    System.out.print("Which Item would you like to see the purchase history for? \n");
    for (int i = 0; i < itemQuantity; i++)
   {
       System.out.println((i+1) + ". " + itemArray[i].toString());
   }
   
   Scanner in = new Scanner(System.in);
   int chosenID = in.nextInt()- 1;
   System.out.print("Purchase History for " + itemArray[chosenID].toString() + ": \n"
           + "------------------------------------------------\n");
   for(int i = 0; i < saleQuantity; i++) 
   {
       if (saleArray[i].itemSold == itemArray[chosenID])
       {
           System.out.println(saleArray[i].printPurchaseHistoryItem(itemArray[chosenID]));
       }
   }
   
}
public static void PrintInventoryLevels(int itemQuantity, Item[] itemArray, int saleQuantity, Sale[] saleArray)
{
    System.out.println("\tID\tItem Name\tStatus");
    for (int i = 0; i < itemQuantity; i++)
    {
        for (int j = 0; j < saleQuantity; j++)
        {
            
            if (saleArray[j].itemSold == itemArray[i])
            {
                System.out.println(itemArray[i].toString() + "\tSold Out");
            }
            
        }
    }
}
}
