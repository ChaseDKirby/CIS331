
package Group_Project;

import javafx.application.Application;
import javafx.event.*;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.Stage;
import java.util.*;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Pos;
import javafx.scene.control.ComboBox;
import javafx.scene.control.TextField;

/**
 *
 * @author chase
 */
public class MenuFX extends Application {
    //Buttons and Labels for Menu Window
    Label lblPrompt = new Label ("Please Select a Menu Option");
    Button btnCustomer = new Button("Customer");
    Button btnContractor = new Button("Contractor");
    Button btnInventoryItem = new Button("Inventory Item");
    Button btnVendor = new Button("Vendor");
    Button btnEnterSale = new Button("Enter a Sale");
    Button btnPrintReport = new Button("Print a Report");
    Button btnExit = new Button("Exit");
    Button btnHome = new Button("Main Menu");
    
    
    // Global Arrays
    ArrayList<Customer> customerArray = new ArrayList<Customer>();
    ArrayList<Contractor> contractorArray = new ArrayList<Contractor>();
    ArrayList<Vendor> vendorArray = new ArrayList<Vendor>();
    ArrayList<Item> itemArray = new ArrayList<Item>();
    ArrayList<Sale> saleArray = new ArrayList<Sale>();
    
    //CUSTOMER LISTS & COMBO BOXES
    ObservableList customersCreated = FXCollections.observableArrayList(); // List view when you hit edit customer
    ListView lstData = new ListView(customersCreated);
    ObservableList editCustomerList = FXCollections.observableArrayList(); // Combo Box when selecting a customer to edit
    ComboBox cmboCustomerOptions = new ComboBox(editCustomerList);
    
    //VENDOR LISTS & COMBOBOXES
    ObservableList vendorCreated = FXCollections.observableArrayList();
    ListView vendorData = new ListView(vendorCreated);   
    ObservableList selectVendorList = FXCollections.observableArrayList();
    ComboBox cmboSelectVendor = new ComboBox(selectVendorList);
    ObservableList editVendorList = FXCollections.observableArrayList();
    ComboBox cmboVendorOptions = new ComboBox(editVendorList);
    
    
    
    //CONTRACTOR LISTS & COMBO BOXES
    ObservableList contractorCreated = FXCollections.observableArrayList();
    ListView contractorData = new ListView(contractorCreated);
    ObservableList selectContractorList = FXCollections.observableArrayList();
    ComboBox cmboSelectContractor = new ComboBox(selectContractorList);
    ObservableList editContractorList = FXCollections.observableArrayList();
    ComboBox cmboContractorOptions = new ComboBox(editContractorList);
    
    // ITEM LISTS & COMBO BOXES
    ObservableList itemsCreated = FXCollections.observableArrayList(); // List view when you hit edit Item
    ListView itemData = new ListView(itemsCreated);
    ObservableList editItemList = FXCollections.observableArrayList(); // Combo Box when selecting a Item to edit
    ComboBox cmboItemOptions = new ComboBox(editItemList);
    
    
    // SALE COMBO BOXES
    ObservableList selectCustomerList = FXCollections.observableArrayList(); // Selecting a customer for entering a sale
    ComboBox cmboSelectCustomer = new ComboBox(selectCustomerList);
    ObservableList selectItemList = FXCollections.observableArrayList(); // Selecting a Item for entering a sale
    ComboBox cmboSelectItem = new ComboBox(selectItemList);
    
    //PRINT REPORT FOR SALE LISTS & COMBO BOXES
    ObservableList reportSaleReceiptList = FXCollections.observableArrayList();
    ListView lstReportReceipt = new ListView(reportSaleReceiptList);
    ObservableList reportSaleReceipt = FXCollections.observableArrayList();
    ComboBox cmboReportSale = new ComboBox(reportSaleReceipt);
    
    //PRINT CUSTOMER HISTORY REPORT LISTS & COMBO BOXES
    ObservableList reportCustomerHistoryList = FXCollections.observableArrayList();
    ListView lstCustomerHistory = new ListView(reportCustomerHistoryList);
    ObservableList reportCustomerHistory = FXCollections.observableArrayList();
    ComboBox cmboCustomerHistory = new ComboBox(reportCustomerHistory);
    
    //PRINT ITEM HISTORY REPORT LISTS & COMBO BOXES
    ObservableList reportItemHistoryList = FXCollections.observableArrayList();
    ListView lstItemHistory = new ListView(reportItemHistoryList);
    ObservableList reportItemHistory = FXCollections.observableArrayList();
    ComboBox cmboItemHistory = new ComboBox(reportItemHistory);
    
    //PRINT INVENTORY LEVELS RPEORT LIST
    ObservableList reportInventoryList = FXCollections.observableArrayList();
    ListView lstInventoryLevels = new ListView(reportInventoryList);
    
    
  
    
    //Creates the Scenes
    Stage window;
    Scene customer, createCustomer, editCustomer, editingCustomer; 
    Scene enterSale, scenePrintReport, scenePrintReceipt, sceneCustomerHistory, sceneItemHistory, sceneInventoryLevels;
    Scene item, createItem, editItem, editingItem;
    Scene vendor, createVendor, editVendor, editingVendor;
    Scene contractor, createContractor, editContractor, editingContractor;
    
    @Override
    public void start(Stage primaryStage) {
        // PRE POPULATE ARRAYS
        PrePopulate(customerArray, contractorArray, itemArray, vendorArray, saleArray);
        
        // Begin Scene
        GridPane menuPane = new GridPane();
        
        menuPane.setAlignment(Pos.CENTER);
        menuPane.setHgap(5);
        menuPane.setVgap(10);
        // Adds all Menu Buttons to the Pane
        menuPane.add(lblPrompt, 0, 0);
        menuPane.add(btnCustomer, 0, 1);
        menuPane.add(btnContractor, 0, 2);
        menuPane.add(btnInventoryItem, 0, 3);
        menuPane.add(btnVendor, 0, 4);
        menuPane.add(btnEnterSale, 0, 5);
        menuPane.add(btnPrintReport, 0, 6);
        menuPane.add(btnExit, 0, 7);
        
        Scene menuScene = new Scene(menuPane, 500, 400);
        
        //Set the primary Scene 
        primaryStage.setScene(menuScene);
        primaryStage.setTitle("Main Menu");
        primaryStage.show();
        
        // Action for when Customer is Selected
        btnCustomer.setOnAction(e -> primaryStage.setScene(customer));
            
            
            // Scene for when Customer is selected at Menu
            Label customerPrompt = new Label("Select Create or Edit Customer");
            Button btnCreateCustomer = new Button("Create Customer");
            Button btnEditCustomer = new Button("Edit Customer");
            Button btnMainMenu = new Button("Main Menu");
            VBox customerLayout = new VBox(20);
            customerLayout.getChildren().addAll(customerPrompt, btnCreateCustomer, btnEditCustomer, btnMainMenu);
            customer = new Scene(customerLayout, 300, 250);
            
            // Create Customer Selected Sets Buttons, Labels and Text Boxes
            btnCreateCustomer.setOnAction(e -> primaryStage.setScene(createCustomer));
                Label createCustomerPrompt = new Label("Enter all Customer Information");
                Label customerFirstName = new Label("First Name");
                TextField txtCustomerFirstName = new TextField();
                Label customerLastName = new Label("Last Name");
                TextField txtCustomerLastName = new TextField();
                Label customerAddress = new Label("Address");
                TextField txtAddress = new TextField();
                Label customerPhoneNumber = new Label("Phone Number");
                TextField txtCustomerPhoneNumber = new TextField();
                Label customerEmail = new Label("Email");
                TextField txtCustomerEmail = new TextField();
                Label customerNotes = new Label("Notes");
                TextArea txtCustomerNotes = new TextArea();
                Button btnSaveCustomer = new Button("Save Customer");
                VBox createCustomerLayout = new VBox(10);
                createCustomerLayout.getChildren().addAll(createCustomerPrompt, customerFirstName, txtCustomerFirstName, customerLastName,
                        txtCustomerLastName, customerAddress, txtAddress, customerPhoneNumber, txtCustomerPhoneNumber, customerEmail, txtCustomerEmail, customerNotes, txtCustomerNotes, btnSaveCustomer);
                createCustomer = new Scene(createCustomerLayout, 500, 600);
                
                // When User wants to save Customer, stores and returns to main menu
                btnSaveCustomer.setOnAction(e -> {   
                    CreateCustomer(txtCustomerFirstName, txtCustomerLastName, txtAddress, txtCustomerPhoneNumber, txtCustomerEmail, txtCustomerNotes, customerArray);
                    MainMenu(primaryStage, menuScene, cmboSelectCustomer, cmboSelectItem);
                    
                });
                btnMainMenu.setOnAction(e -> {
                    MainMenu(primaryStage, menuScene, cmboSelectCustomer, cmboSelectItem);
                });
                Label EditCustomer = new Label("Select a Customer to Edit");                
                Button btnChooseCustomer = new Button("Edit Customer");
                Button btnMainMenu3 = new Button("Main Menu");
                VBox editCustomerLayout = new VBox(10);
                editCustomerLayout.getChildren().addAll(EditCustomer, lstData , cmboCustomerOptions, btnChooseCustomer, btnMainMenu3);
                editCustomer = new Scene(editCustomerLayout, 500, 500);
            // Edit Customer Scene    
            btnEditCustomer.setOnAction(e -> {
                primaryStage.setScene(editCustomer);
                // Show all Customers Created
                if (customerArray.isEmpty())
                {
                    customersCreated.add("Please Add a Customer First");
                }
                else
                {
                    customersCreated.add("        ID\t\t\tFull Name");
                    for (Customer cust: customerArray)
                    {
                            
                            customersCreated.add(cust.toString());
                            editCustomerList.add(cust.toString());  
                    }
                }
                    
            });
            btnMainMenu3.setOnAction(e -> {
                cmboCustomerOptions.getItems().clear();
                lstData.getItems().clear();
                MainMenu(primaryStage, menuScene);
            });
        btnHome.setOnAction(e -> {
            cmboCustomerOptions.getItems().clear();
            lstData.getItems().clear();
            cmboItemOptions.getItems().clear();
            itemData.getItems().clear();
            MainMenu(primaryStage, menuScene, cmboSelectCustomer, cmboSelectItem);
        });
           

            // Edit Customer Screen
                Label editCustomerPrompt = new Label("Enter all Customer Information");
                Label editCustomerFirstName = new Label("First Name");
                TextField txtEditCustomerFirstName = new TextField();
                Label editCustomerLastName = new Label("Last Name");
                TextField txtEditCustomerLastName = new TextField();
                Label editCustomerAddress = new Label("Address");
                TextField txtEditAddress = new TextField();
                Label editCustomerPhoneNumber = new Label("Phone Number");
                TextField txtEditCustomerPhoneNumber = new TextField();
                Label editCustomerEmail = new Label("Email");
                TextField txtEditCustomerEmail = new TextField();
                Label editCustomerNotes = new Label("Notes:");
                //int customer1 = cmboCustomerOptions.getSelectionModel().getSelectedIndex();
                //String grabNotes = customerArray.get(customer1).notes;
                TextArea txtEditCustomerNotes = new TextArea();
                Button btnEditSaveCustomer = new Button("Save Customer");
                VBox editingCustomerLayout = new VBox(10);
                editingCustomerLayout.getChildren().addAll(editCustomerPrompt, editCustomerFirstName, txtEditCustomerFirstName, editCustomerLastName, txtEditCustomerLastName, editCustomerAddress,
                        txtEditAddress, editCustomerPhoneNumber, txtEditCustomerPhoneNumber, editCustomerEmail, txtEditCustomerEmail, editCustomerNotes, txtEditCustomerNotes, btnEditSaveCustomer, btnMainMenu);
                editingCustomer = new Scene(editingCustomerLayout, 500, 600);
            btnChooseCustomer.setOnAction(e -> {
                primaryStage.setScene(editingCustomer);
                
            });
            // Uses the EditCustomer() method in the Customer class to change a certain customer
            btnEditSaveCustomer.setOnAction(e -> {
                Customer.EditCustomer(txtEditCustomerFirstName, txtEditCustomerLastName, txtEditAddress, txtEditCustomerPhoneNumber, txtEditCustomerEmail, customerArray, cmboCustomerOptions);
                cmboCustomerOptions.getItems().clear();
                lstData.getItems().clear();
                MainMenu(primaryStage, menuScene, cmboSelectCustomer, cmboSelectItem);
            });
        

                        ///////CONTRACTOR
            
            // Action for when Contractor is Selected
            btnContractor.setOnAction(e -> primaryStage.setScene(contractor));
            
            
            // Scene for when Contractor is selected at Menu
            Label contractorPrompt = new Label("Select Create or Edit Contractor");
            Button btnCreateContractor = new Button("Create Contractor");
            Button btnEditContractor = new Button("Edit Contractor");
            VBox contractorLayout = new VBox(20);
            contractorLayout.getChildren().addAll(contractorPrompt, btnCreateContractor, btnEditContractor);
            contractor = new Scene(contractorLayout, 300, 250);
                
            
            // Create Contractor Selected Sets Buttons, Labels and Text Boxes
            btnCreateContractor.setOnAction(e -> primaryStage.setScene(createContractor));
                Label createContractorPrompt = new Label("Enter all Contractor Information");
                Label contractorFirstName = new Label("First Name");
                TextField txtContractorFirstName = new TextField();
                Label contractorLastName = new Label("Last Name");
                TextField txtContractorLastName = new TextField();
                Label contractorAddress = new Label("Address");
                TextField txtContractorAddress = new TextField();
                Label contractorPhoneNumber = new Label("Phone Number");
                TextField txtContractorPhoneNumber = new TextField();
                Label contractorEmail = new Label("Email");
                TextField txtContractorEmail = new TextField();
                Label contractorBusinessName = new Label("Business Name");
                TextField txtContractorBusinessName = new TextField();
                Label contractorBusinessNumber = new Label("Business Number");
                TextField txtContractorBusinessNumber = new TextField();
                Button btnSaveContractor = new Button("Save Contractor");
                VBox createContractorLayout = new VBox(10);
                createContractorLayout.getChildren().addAll(createContractorPrompt, contractorFirstName, txtContractorFirstName, contractorLastName,
                        txtContractorLastName, contractorAddress, txtContractorAddress, contractorPhoneNumber, txtContractorPhoneNumber, contractorEmail, 
                        txtContractorEmail, contractorBusinessName, txtContractorBusinessName, contractorBusinessNumber, txtContractorBusinessNumber, btnSaveContractor);
                createContractor = new Scene(createContractorLayout, 500, 600);
            
            
       
             // When User wants to save Contractor, stores and returns to main menu
                btnSaveContractor.setOnAction(e -> {                                
                    CreateContractor(txtContractorFirstName, txtContractorLastName, txtAddress, txtContractorPhoneNumber, txtContractorEmail, txtContractorBusinessName, txtContractorBusinessNumber, contractorArray);
                    System.out.println("");
                    MainMenu(primaryStage, menuScene);
                });
                Label EditContractor = new Label("Select a Contractor to Edit");                
                Button btnChooseContractor = new Button("Edit Contractor");
                Button btnMainMenu4 = new Button("Main Menu");
                VBox editContractorLayout = new VBox(10);
                editContractorLayout.getChildren().addAll(EditContractor, contractorData , cmboContractorOptions, btnChooseContractor, btnMainMenu4);
                editContractor = new Scene(editContractorLayout, 500, 500);
            // Edit Contractor Scene    
            btnEditContractor.setOnAction(e -> {
                primaryStage.setScene(editContractor);
                if (contractorArray.isEmpty())
                {
                    contractorCreated.add("Please Add a Contractor First");
                }
                else
                {
                    for (Contractor cust: contractorArray)
                    {
                            contractorCreated.add("        ID\t\t\tFull Name");
                            contractorCreated.add(cust.toString());
                            editContractorList.add(cust.toString());  
                    }
                }
                    
            });    
            btnMainMenu4.setOnAction(e -> {
                
            });
                
            // Show all Customers Created
            btnHome.setOnAction(e -> {
                cmboContractorOptions.getItems().clear();
                lstData.getItems().clear();
                MainMenu(primaryStage, menuScene);
            });
            // Button to display all the contractors that have been created

            // Edit Contractor Screen
            btnChooseContractor.setOnAction(e -> primaryStage.setScene(editingContractor));              
                Label editContractorPrompt = new Label("Enter all Contractor Information");
                Label editContractorFirstName = new Label("First Name");
                TextField txtEditContractorFirstName = new TextField();
                Label editContractorLastName = new Label("Last Name");
                TextField txtEditContractorLastName = new TextField();
                Label editContractorAddress = new Label("Address");
                TextField txtEditContractorAddress = new TextField();
                Label editContractorPhoneNumber = new Label("Phone Number");
                TextField txtEditContractorPhoneNumber = new TextField();
                Label editContractorEmail = new Label("Email");
                TextField txtEditContractorEmail = new TextField();               
                Button btnEditSaveContractor = new Button("Save Customer");
                VBox editingContractorLayout = new VBox(10);
                editingContractorLayout.getChildren().addAll(editContractorPrompt, editContractorFirstName, txtEditContractorFirstName, editContractorLastName, txtEditContractorLastName, editContractorAddress,
                        txtEditContractorAddress, editContractorPhoneNumber, txtEditContractorPhoneNumber, editContractorEmail, txtEditContractorEmail, btnEditSaveContractor);
                editingContractor = new Scene(editingContractorLayout, 500, 500);
            
            // Uses the EditContractor() method in the Contractor class to change a certain customer
            btnEditSaveContractor.setOnAction(e -> {
                Contractor.EditContractor(txtEditContractorFirstName, txtEditContractorLastName, txtEditContractorAddress, txtEditContractorPhoneNumber, txtEditContractorEmail, contractorArray, cmboContractorOptions);
                cmboContractorOptions.getItems().clear();
                contractorData.getItems().clear();
                MainMenu(primaryStage, menuScene);
            });
            
        //Action for when item is selected
        btnInventoryItem.setOnAction(e -> primaryStage.setScene(item));
        
            //Scene for when Item is selected at Menu
            Label itemPrompt = new Label("Select Create or edit Item");
            Button btnCreateItem = new Button("Create item");
            Button btnEditItem = new Button("Edit item");
            Button btnMainMenu1 = new Button("Main Menu");
            VBox itemLayout = new VBox(10);
            itemLayout.getChildren().addAll(itemPrompt, btnCreateItem, btnEditItem);
            item = new Scene(itemLayout, 300, 250);

            //Create Item Selected Sets Buttons, Labels and Text Boxes
            btnCreateItem.setOnAction(e -> primaryStage.setScene(createItem));
                Label createItemPrompt = new Label("Enter all Item information");
                Label itemName = new Label("Item Name");
                TextField txtItemName = new TextField();
                Label itemQuantity = new Label("Item Quantity");
                TextField txtItemQuantity = new TextField();
                Label itemWeight = new Label("Item Weight");
                TextField txtItemWeight = new TextField();
                Label itemDescription = new Label("Item Description");
                TextField txtItemDescription = new TextField();
                Label itemPricePaid = new Label("Item Price Paid");
                TextField txtItemPricePaid = new TextField();
                Label itemForSalePrice = new Label("Item Sale Price");
                TextField txtItemSalePrice = new TextField();
                Button btnItemSave = new Button("Save item");
                VBox createItemLayout = new VBox(10);
                createItemLayout.getChildren().addAll(createItemPrompt, itemName, txtItemName, itemQuantity, txtItemQuantity, itemWeight, txtItemWeight,
                        itemDescription, txtItemDescription, itemPricePaid, txtItemPricePaid, itemForSalePrice, txtItemSalePrice, btnItemSave);
                createItem = new Scene(createItemLayout, 500, 500);

                //When User wants to save Item, stores and returns to main menu
                btnItemSave.setOnAction(e -> {
                    CreateItem(txtItemName, txtItemQuantity, txtItemWeight, txtItemDescription, txtItemPricePaid, txtItemSalePrice, itemArray);
                    MainMenu(primaryStage, menuScene, cmboItemOptions);
                });
                Label editItems = new Label("Select an Item to edit");
                Button btnChooseItems = new Button("Edit Items");
                VBox editItemLayout = new VBox(10);
                editItemLayout.getChildren().addAll(editItems, itemData, cmboItemOptions, btnChooseItems, btnMainMenu);
                editItem = new Scene(editItemLayout, 500, 500);

                //Edit Item Scene
            btnEditItem.setOnAction(e -> {
                primaryStage.setScene(editItem);

                if(itemArray.isEmpty())
                {
                   itemsCreated.add("Please Add an Item First");
                }
                else 
                {
                    itemsCreated.add("ID\t\tItem Name");
                    for(Item item: itemArray)
                    {
                           itemsCreated.add(item.toString());
                           editItemList.add(item.toString());
                    }
                }
            });             
            btnMainMenu1.setOnAction(e -> {
                MainMenu(primaryStage, menuScene);
            });
                //Edit Item Screen
                btnChooseItems.setOnAction(e -> primaryStage.setScene(editingItem));
                Label editItemPrompt = new Label("Enter all Item information");
                Label editItemName = new Label("Item Name");
                TextField edittxtItemName = new TextField();
                Label edititemQuantity = new Label("Item Quantity");
                TextField edittxtItemQuantity = new TextField();
                Label editItemWeight = new Label("Item Weight");
                TextField edittxtItemWeight = new TextField();
                Label editItemDescription = new Label("Item Description");
                TextField edittxtItemDescription = new TextField();
                Label editItemPricePaid = new Label("Item Price Paid");
                TextField edittxtItemPricePaid = new TextField();
                Label editItemForSalePrice = new Label("Item Sale Price");
                TextField edittxtItemSalePrice = new TextField();
                Button btnEditItemSave = new Button("Save item");
                VBox editingItemLayout = new VBox(10);
                editingItemLayout.getChildren().addAll(editItemPrompt, editItemName, edittxtItemName,edititemQuantity,edittxtItemQuantity,
                editItemWeight,edittxtItemWeight,editItemDescription, edittxtItemDescription,
                editItemPricePaid, edittxtItemPricePaid,editItemForSalePrice ,edittxtItemSalePrice, btnEditItemSave, btnHome);
                editingItem = new Scene(editingItemLayout, 500, 500);

                //Button to display all the customers that have been created
                btnEditItemSave.setOnAction(e -> {
                    Item.EditItem(edittxtItemName, edittxtItemQuantity, edittxtItemWeight, edittxtItemDescription, edittxtItemPricePaid,
                    edittxtItemSalePrice, itemArray, cmboItemOptions);
                    itemData.getItems().clear();
                    cmboItemOptions.getItems().clear();
                    MainMenu(primaryStage, menuScene);

                });
            
            
        // Labels and Text fields for Enter Sale
        Label lblEnterSale = new Label("Enter a Sale");
        Label lblSelectItem = new Label("Select a Item");
        Label lblEnterQuantity = new Label("Enter Quantity of Item Bought");
        TextField txtEnterQuantity = new TextField();
        Label lblEnterDate = new Label("Enter Date Purchase (XX/XX/XXX)");
        TextField txtEnterDate = new TextField();
        Label lblSelectCustomer = new Label("Select a Customer");
        Button btnCreateSale = new Button("Enter Sale");
        Button btnMainMenu2 = new Button("Main Menu");
        Button btnMainMenu6 = new Button("Main Menu");
        VBox enterCustomerLayout = new VBox(10);
        enterCustomerLayout.getChildren().addAll(lblEnterSale, lblSelectItem, cmboSelectItem, lblEnterQuantity,
                txtEnterQuantity, lblEnterDate, txtEnterDate, lblSelectCustomer, cmboSelectCustomer, btnCreateSale, btnMainMenu6);
        enterSale = new Scene(enterCustomerLayout, 500, 500);
        // Action button for Enter Sale
        btnEnterSale.setOnAction(e -> {
            primaryStage.setScene(enterSale);
            
            for (Item item: itemArray)
            {
                selectItemList.add(item.toString());
            }
            for (Customer cust: customerArray)
            {
                selectCustomerList.add(cust.toString());  
            }
            // Loop to subtract invetory when sale is created
        });

            btnMainMenu6.setOnAction(e -> {
                cmboSelectCustomer.getItems().clear();
                cmboSelectItem.getItems().clear();
                MainMenu(primaryStage, menuScene, cmboSelectCustomer, cmboSelectItem);
            });
            // Calls method to create a sale and clears combobox
            btnCreateSale.setOnAction(e -> {
                CreateSale(txtEnterQuantity, txtEnterDate, cmboSelectItem, cmboSelectCustomer, saleArray, itemArray, customerArray);
                cmboSelectCustomer.getItems().clear();
                cmboSelectItem.getItems().clear();
                MainMenu(primaryStage, menuScene, cmboSelectCustomer, cmboSelectItem);
            });    
            
                // Action for when Vendor is Selected
        btnVendor.setOnAction(e -> primaryStage.setScene(vendor));

            // Scene for when Vendor is selected at Menu
            Label vendorPrompt = new Label("Select Create or Edit Vendor");
            Button btnCreateVendor = new Button("Create Vendor");
            Button btnEditVendor = new Button("Edit Vendor");
            VBox vendorLayout = new VBox(20);
            vendorLayout.getChildren().addAll(vendorPrompt, btnCreateVendor, btnEditVendor);
            vendor = new Scene(vendorLayout, 300, 250);
       
            // Create Customer Selected Sets Buttons, Labels and Text Boxes
            btnCreateVendor.setOnAction(e -> primaryStage.setScene(createVendor));
                Label createVendorPrompt = new Label("Enter all Vendor Information");
                Label vendorBusinessName = new Label("Vendor Business Name");
                TextField txtVendorBusinessName = new TextField();
                Label vendorBusinessAddress = new Label("Vendor Business Address");
                TextField txtVendorBusinessAddress = new TextField();
                Label vendorPhoneNumber = new Label("Vendor Phone Number");
                TextField txtVendorPhoneNumber = new TextField();
                Button btnSaveVendor = new Button("Save Vendor");
                VBox createVendorLayout = new VBox(10);
                createVendorLayout.getChildren().addAll(createVendorPrompt, vendorBusinessName, txtVendorBusinessName,
                        vendorBusinessAddress, txtVendorBusinessAddress, vendorPhoneNumber, txtVendorPhoneNumber, btnSaveVendor);
                createVendor = new Scene(createVendorLayout, 500, 500);

                // When User wants to save Vendor, stores and returns to main menu
                btnSaveVendor.setOnAction(e -> {                                
                    CreateVendor(txtVendorBusinessName, txtVendorBusinessAddress, txtVendorPhoneNumber, vendorArray);
                    System.out.println("");
                    MainMenu(primaryStage, menuScene);
                });
                Label EditVendor = new Label("Select a Vendor to Edit");                
                Button btnChooseVendor = new Button("Edit Vendor");
                VBox editVendorLayout = new VBox(10);
                editVendorLayout.getChildren().addAll(EditVendor, vendorData , cmboVendorOptions, btnChooseVendor, btnMainMenu1);
                editVendor = new Scene(editVendorLayout, 500, 500);
        
        // Edit Vendor Scene    
            btnEditVendor.setOnAction(e -> {
                primaryStage.setScene(editVendor);
                if (vendorArray.isEmpty())
                {
                    vendorCreated.add("Please Add a Vendor First");
                }
                else
                {
                    vendorCreated.add("        ID\t\t\tVendor Business Name");
                    for (Vendor ven: vendorArray)
                    {

                            vendorCreated.add(ven.toString());
                            editVendorList.add(ven.toString());  
                    }
                }
            });        

            // Show all Vendors Created
            btnMainMenu4.setOnAction(e -> {
                cmboVendorOptions.getItems().clear();
                vendorData.getItems().clear();
                MainMenu(primaryStage, menuScene);
            });

            // Button to display all the vendors that have been created

            // Edit Vendor Screen
            btnChooseVendor.setOnAction(e -> primaryStage.setScene(editingVendor));              
                Label editVendorPrompt = new Label("Enter all Vendor Information");
                Label editVendorBusinessName = new Label("Vendor Business Name");
                TextField txtEditVendorBusinessName = new TextField();
                Label editVendorBusinessAddress = new Label("Vendor Business Address");
                TextField txtEditVendorBusinessAddress = new TextField();
                Label editVendorPhoneNumber = new Label("Vendor Phone Number");
                TextField txtEditVendorPhoneNumber = new TextField();   
                Button btnEditSaveVendor = new Button("Save Vendor");
                VBox editingVendorLayout = new VBox(10);
                editingVendorLayout.getChildren().addAll(editVendorPrompt, editVendorBusinessName, txtEditVendorBusinessName, editVendorBusinessAddress,
                        txtEditVendorBusinessAddress, editVendorPhoneNumber, txtEditVendorPhoneNumber, btnEditSaveVendor);
                editingVendor = new Scene(editingVendorLayout, 500, 500);

            // Uses the EditVendor() method in the Vendor class to change a certain vendor
            btnEditSaveVendor.setOnAction(e -> {
                Vendor.EditVendor(txtEditVendorBusinessName, txtEditVendorBusinessAddress, txtEditVendorPhoneNumber, vendorArray, cmboVendorOptions);
                cmboVendorOptions.getItems().clear();
                vendorData.getItems().clear();
                MainMenu(primaryStage, menuScene);
            });    
        //Setting Scene for Print Report
        Label lblPrintReport = new Label("Select a Report to Print");
        Button btnPrintReceipt = new Button("Print Receipt for Sale");
        Button btnPrintCustomerHistory = new Button("Print History of Customer");
        Button btnPrintItemHistory = new Button("Print History of Item");
        Button btnPrintInventoryLevel = new Button("Print Current Inventory Levels");
        VBox printReport = new VBox(10);
        printReport.getChildren().addAll(lblPrintReport, btnPrintReceipt, btnPrintCustomerHistory, btnPrintItemHistory, btnPrintInventoryLevel, btnHome);
        scenePrintReport = new Scene(printReport, 250, 250);
        // Button for Print Report
        btnPrintReport.setOnAction(e -> {
            primaryStage.setScene(scenePrintReport);   
        });
            // Setting up Print Receipt 
            Label lblPrintReceipt = new Label("Select a Sale to print a report");
            Button btnCreateReport = new Button("Print Report");
            VBox printReceipt = new VBox(10);
            printReceipt.getChildren().addAll(lblPrintReceipt, cmboReportSale, lstReportReceipt, btnCreateReport, btnMainMenu2);
            scenePrintReceipt = new Scene(printReceipt, 500, 500);
            btnPrintReceipt.setOnAction(e -> {
                primaryStage.setScene(scenePrintReceipt);
                for (Sale sale1: saleArray)
                {
                    reportSaleReceipt.add(sale1.toString());
                }
                
                
            });
                btnCreateReport.setOnAction(e -> {
                int i = cmboReportSale.getSelectionModel().getSelectedIndex();
                reportSaleReceiptList.add(saleArray.get(i).describeSale());
                
                });
            btnMainMenu2.setOnAction(e -> {
                cmboReportSale.getItems().clear();
                lstReportReceipt.getItems().clear();
                MainMenu(primaryStage, menuScene);
            });    
            // Setting up Print Customer History
            Label lblPrintCustomerHistory = new Label("Select a Customer to Print History");
            Button btnCustomerHistory = new Button("Print Report");
            Button btnMainMenu7 = new Button("Main Menu");
            VBox customerHistory = new VBox(10);
            customerHistory.getChildren().addAll(lblPrintCustomerHistory, cmboCustomerHistory, lstCustomerHistory, btnCustomerHistory, btnMainMenu7);
            sceneCustomerHistory = new Scene(customerHistory, 700, 500);
            btnPrintCustomerHistory.setOnAction(e -> {
                primaryStage.setScene(sceneCustomerHistory);
                for (Customer cust: customerArray)
                {
                    reportCustomerHistory.add(cust.toString());
                }
            });
                btnCustomerHistory.setOnAction(e -> {
                    int i = cmboCustomerHistory.getSelectionModel().getSelectedIndex();
                    reportCustomerHistoryList.add("\n" + customerArray.get(i).firstName + " " + customerArray.get(i).lastName);
                    for (int j = 0; j < Sale.saleQuantity; j++)
                    {
                      
                        if (saleArray.get(j).customer == customerArray.get(i))
                        {
                            
                            reportCustomerHistoryList.add(saleArray.get(j).CustomerPurchaseHistory(customerArray.get(i)));
                        }
                    }
                });
            btnMainMenu7.setOnAction(e -> {
                cmboCustomerHistory.getItems().clear();
                lstCustomerHistory.getItems().clear();
                MainMenu(primaryStage, menuScene);
            });
            // Setting up Print Item History
            Label lblPrintItemHistory = new Label("Select a Item to Print History");
            Button btnItemHistory = new Button("Print Report");
            Button btnMainMenu8 = new Button("Main Menu");
            VBox itemHistory = new VBox(10);
            itemHistory.getChildren().addAll(lblPrintItemHistory, cmboItemHistory, lstItemHistory, btnItemHistory, btnMainMenu8);
            sceneItemHistory = new Scene(itemHistory, 600, 600);
            btnPrintItemHistory.setOnAction(e -> {
                primaryStage.setScene(sceneItemHistory);
                for (Item item1: itemArray)
                {
                    reportItemHistory.add(item1.toString());
                }    
            });
                btnItemHistory.setOnAction(e -> {
                    int i = cmboItemHistory.getSelectionModel().getSelectedIndex();
                    reportItemHistoryList.add(itemArray.get(i).toString());
                    for (int j = 0; j < Sale.saleQuantity; j++)
                    {
                        if (saleArray.get(j).itemSold == itemArray.get(i))
                        {
                            reportItemHistoryList.add(saleArray.get(j).printPurchaseHistoryItem(itemArray.get(i)));
                        }
                    }
                });
                btnMainMenu8.setOnAction(e -> {
                cmboItemHistory.getItems().clear();
                lstItemHistory.getItems().clear();
                MainMenu(primaryStage, menuScene);
            });
            Label lblPrintInventoryLevels = new Label("Current Inventory Levels");
            Button btnInventoryLevels = new Button("Display Inventoy Levels");
            Button btnMainMenu9 = new Button("Main Menu");
            VBox inventoryLevels = new VBox(10);
            inventoryLevels.getChildren().addAll(lblPrintInventoryLevels, btnInventoryLevels, lstInventoryLevels, btnMainMenu9);
            sceneInventoryLevels = new Scene(inventoryLevels, 600, 600);
            // Setting up Inventory Level
            btnPrintInventoryLevel.setOnAction(e -> {
                primaryStage.setScene(sceneInventoryLevels);
            });
            btnInventoryLevels.setOnAction(e -> {
                for (int i = 0; i < Item.itemQuantity; i++)
                {
                    if (itemArray.get(i).quantity <= 0)
                    {
                        reportInventoryList.add(itemArray.get(i).soldOut());
                    }
                    else
                    {
                        reportInventoryList.add(itemArray.get(i).inventoryLevels());
                    }
                } 
            });
            btnMainMenu9.setOnAction(e -> { 
                reportInventoryList.clear();
                MainMenu(primaryStage, menuScene);
            });
            
        
        // Action for when Exit is Selected
        btnExit.setOnAction(e -> {
            System.exit(0);
        });
        
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        launch(args);
    }
    public static void MainMenu(Stage primaryStage, Scene menuScene)
    {
        primaryStage.setScene(menuScene);
    }
    public static void MainMenu(Stage primaryStage, Scene menuScene, ComboBox cmboSelectCustomer, ComboBox cmboSelectItem)
    {
        cmboSelectCustomer.getItems().clear();
        cmboSelectItem.getItems().clear();
        primaryStage.setScene(menuScene);
        
    }
    public static void MainMenu(Stage primaryStage, Scene menuScene, ComboBox combo)
    {
        combo.getItems().clear();
        primaryStage.setScene(menuScene);
    }
    public static void CreateCustomer(TextField txtCustomerFirstName, TextField txtCustomerLastName, TextField txtAddress, 
                          TextField txtCustomerPhoneNumber, TextField txtCustomerEmail, TextArea txtCustomerNotes, ArrayList<Customer> customerArray)
    {       
        String firstName = txtCustomerFirstName.getText();
        txtCustomerFirstName.clear();
                    
        String lastName = txtCustomerLastName.getText();
        txtCustomerLastName.clear();
                    
        String address = txtAddress.getText();
        txtAddress.clear();
                    
        String phoneNumber = txtCustomerPhoneNumber.getText();
        txtCustomerPhoneNumber.clear();
                    
        String email = txtCustomerEmail.getText(); 
        txtCustomerEmail.clear();
        
        String notes = txtCustomerNotes.getText();
        txtCustomerNotes.clear();
        
        customerArray.add(new Customer(firstName, lastName, address, phoneNumber, email));
        
       
    }
    public static void CreateSale(TextField txtEnterQuantity, TextField txtEnterDate, 
            ComboBox cmboSelectItem, ComboBox cmboSelectCustomer, ArrayList<Sale> saleArray, ArrayList<Item> itemArray, ArrayList<Customer> customerArray)
    {
        int item = cmboSelectItem.getSelectionModel().getSelectedIndex();
        Item item1 = itemArray.get(item);
        
        int quantity = Integer.valueOf(txtEnterQuantity.getText());
        txtEnterQuantity.clear();
        
        String date = txtEnterDate.getText();
        txtEnterDate.clear();
        int customer = cmboSelectCustomer.getSelectionModel().getSelectedIndex();
        Customer customer1 = customerArray.get(customer);
        
        saleArray.add(new Sale(item1, quantity, date, customer1));
    }
        public static void CreateItem(TextField txtItemName, TextField txtItemQuantity, TextField txtItemWeight,
             TextField txtItemDescription, TextField txtItemPricePaid, TextField txtItemSalePrice, ArrayList<Item> itemArray)
    {
        String itemName = txtItemName.getText();
        txtItemName.clear();
        
        String itemQuantity = txtItemQuantity.getText();
        int itemNumberQuantity = Integer.parseInt(itemQuantity);
        txtItemQuantity.clear();
        
        String weight = txtItemWeight.getText();
        double itemNumberWeight = Double.parseDouble(weight);
        txtItemWeight.clear();
        
        String description = txtItemDescription.getText();
        txtItemDescription.clear();
        
        String pricePaid = txtItemPricePaid.getText();
        double itemNumberPricePaid = Double.parseDouble(pricePaid);
        txtItemPricePaid.clear();
        
        String forSalePrice = txtItemSalePrice.getText();
        double itemNumberSalePrice = Double.parseDouble(forSalePrice);
        txtItemSalePrice.clear();
        
        itemArray.add(new Item(itemName, itemNumberQuantity, itemNumberWeight, description, itemNumberPricePaid, itemNumberSalePrice));
    }
        public static void CreateVendor(TextField txtVendorBusinessName, TextField txtVendorBusinessAddress, 
                          TextField txtVendorPhoneNumber, ArrayList<Vendor> vendorArray)
    {       
        String vendorBusinessName = txtVendorBusinessName.getText(); 
        txtVendorBusinessName.clear();
                    
        String vendorBusinessAddress = txtVendorBusinessAddress.getText();   
        txtVendorBusinessAddress.clear();
                    
        String vendorPhoneNumber = txtVendorPhoneNumber.getText();
        txtVendorPhoneNumber.clear();
                    
        vendorArray.add(new Vendor(vendorBusinessName, vendorBusinessAddress, vendorPhoneNumber));       
    }
        public static void PrePopulate(ArrayList<Customer> customerArray, ArrayList<Contractor> contractorArray, ArrayList<Item> itemArray, ArrayList<Vendor> vendorArray, ArrayList<Sale> saleArray)
        {
                // CUSTOMERS
                customerArray.add(new Customer("Adam", "Sandler", "3204 Sandy Rd", "3203458909", "ASandler@yahoo.com"));
                customerArray.add(new Customer("Seth", "Rogan", "89920 Hills St", "1239905273", "SRogan@gmail.com"));
                customerArray.add(new Customer("Ryan", "Renolds", "2933 Showtime Rd", "847333009", "RRynolds@yahoo.com"));
                customerArray.add(new Customer("Denzel", "Washington", "2312 Equalizer BLVD", "5567893344", "DWashington@yahoo.com"));
                
                // ITEMS
                itemArray.add(new Item("TV", 100, 25.3, "LED Flat Screen TV", 330.0, 290.0));
                itemArray.add(new Item("Candle", 100, 5.0, "Scented Candle", 10.0, 9.0));
                itemArray.add(new Item("Xbox", 100, 10.0, "Video Game", 220.0, 199.99));
                itemArray.add(new Item("Computer", 100, 15.7, "Desktop Computer", 556.35, 510.00));
                itemArray.add(new Item("Speakers", 100, 17.2, "Boze Speaker", 65.8, 59.99));
                itemArray.add(new Item("Backpack", 100, 6.8, "Backpack to hold books", 42.56, 35.99));
                itemArray.add(new Item("Bottle Water", 1000, 1.4, "Purified Drinking Water", 3.24, 2.99));
                itemArray.add(new Item("Phone", 100, 3.5, "iPhone 7.0", 456.34, 399.99));
                itemArray.add(new Item("Couch", 100, 120.3, "Tan L-Shaped Couch", 995.43, 875.99));
                itemArray.add(new Item("Phone Charger", 100, 1.0, "6 Foot iPhone Charger", 11.45, 9.99));
                
                // VENDORS  
                vendorArray.add(new Vendor("Apple Inc", "1000 Apple Rd", "4563329000"));
                vendorArray.add(new Vendor("Samsung", "9087 Runaway Drive", "6783322141"));
                vendorArray.add(new Vendor("Microsoft", "2342 South St", "3234518768"));
                
                saleArray.add(new Sale(itemArray.get(0), 5, "04/29/2010", customerArray.get(2)));
                saleArray.add(new Sale(itemArray.get(6), 24, "11/13/2018", customerArray.get(1)));
                saleArray.add(new Sale(itemArray.get(9), 1, "09/05/2009", customerArray.get(0)));
                saleArray.add(new Sale(itemArray.get(3), 1, "04/12/2000", customerArray.get(3)));
                saleArray.add(new Sale(itemArray.get(2), 5, "11/01/2015", customerArray.get(2)));
                
        }
        public static void CreateContractor(TextField txtContractorFirstName, TextField txtContractorLastName, TextField txtContractorAddress, 
                          TextField txtContractorPhoneNumber, TextField txtContractorEmail, TextField txtContractorBusinessName, TextField txtContractorBusinessNumber, 
                          ArrayList<Contractor> contractorArray)
    {       
        String firstName = txtContractorFirstName.getText(); 
        txtContractorFirstName.clear();
                    
        String lastName = txtContractorLastName.getText();
        txtContractorLastName.clear();
                    
        String address = txtContractorAddress.getText();   
        txtContractorAddress.clear();
                    
        String phoneNumber = txtContractorPhoneNumber.getText();
        txtContractorPhoneNumber.clear();
                    
        String email = txtContractorEmail.getText(); 
        txtContractorEmail.clear();
       
        
        String businessName = txtContractorBusinessName.getText();
        txtContractorBusinessName.clear();
        
        int businessNumber = Integer.valueOf(txtContractorBusinessNumber.getText());
        txtContractorBusinessNumber.clear();
        
        
        
        contractorArray.add(new Contractor( firstName, lastName, address, phoneNumber, email, businessName, businessNumber));       
    }
        public static void EditNotes(ComboBox cmboCustomerOptions)
        {
            
            
        }
}
